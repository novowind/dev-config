
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 插件相关
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" tarbar
Plug 'majutsushi/tagbar'
nmap <F8> :TagbarToggle<CR>
" 启动 时自动focus
let g:tagbar_autofocus = 1


" LeadeerF
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<c-n>'
" noremap <c-m> :LeaderfMru<cr>
noremap <c-f> :LeaderfFunction!<cr>
noremap <c-t> :LeaderfTag<cr>
noremap <c-b> :LeaderfBuffer<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}


Plug 'vim-scripts/google.vim'
Plug 'vim-scripts/a.vim'


Plug 'octol/vim-cpp-enhanced-highlight'
let c_no_curly_error = 1


" - 号直接显示当前目录文件， 回车键 进入当前目录
Plug 'justinmk/vim-dirvish'


" nerdtree
Plug 'scrooloose/nerdtree'
" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap fl :NERDTreeToggle<cr>
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=32
" 设置NERDTree子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
" let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
let NERDTreeChDirMode=1
let NERDTreeDirArrows=1


" ctags && gutentags && gtags
Plug 'universal-ctags/ctags'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1
" let g:gutentags_define_advanced_commands = 1

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.hg', '.project']
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+ailmnzS', '--extra=+q', '--tag-relative=yes']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+d+e+f+g+h+l+m+p+s+t+u+v+x+z+c+n+A+N+U+Z']
let g:gutentags_ctags_extra_args += ['--c-kinds=+d+e+g+h+l+m+s+t+u+v+z+f+p+x']
let g:gutentags_ctags_extra_args += ['--links=yes']
let g:gutentags_ctags_extra_args += ['--languages=c,c++']
let g:gutentags_ctags_extra_args += ['--exclude=*/build_tools/*']
let g:gutentags_ctags_extra_args += ['--exclude=*/pub/*']
let g:gutentags_ctags_extra_args += ['--exclude=*/test/*']
let g:gutentags_ctags_extra_args += ['--exclude=*/third_party/*']
" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" cscope
Plug 'aceofall/gtags.vim'
Plug 'joereynolds/gtags-scope'
set cscopetag                  " 使用 cscope 作为 tags 命令
set cscopeprg='gtags-cscope'   " 使用 gtags-cscope 代替 cscope
let GtagsCscope_Auto_Load = 1
let CtagsCscope_Auto_Map = 1
let GtagsCscope_Quiet = 1


" YCM
Plug 'Valloric/YouCompleteMe', { 'do': 'YCM_CORES=1 python3 ./install.py --clang-completer' }
let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf = '/root/.vim/.ycm_extra_conf.py'
let g:ycm_add_preview_to_completeopt = 0 " 开启实时错误或者warning的检测
let g:ycm_show_diagnostics_ui=0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars=2
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_collect_identifiers_from_comments_and_strings=2

" 开启 YCM 标签引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>' " 使用 Ctrl+Z 主动触发语义补全
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
" inoremap <leader>; <C-x><C-o>
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1

noremap <c-z> <NOP>
set completeopt=menu,menuone

" 错误标记
let g:ycm_error_symbol = '✗'  "set error or warning signs
" warning标记
let g:ycm_warning_symbol = '⚠'

" 只能是 #include 或已打开的文件
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

" 修改补全列表配色
highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black

" 对指定源文件，输入两个字母后即触发语义补全
let g:ycm_semantic_triggers =  {
           \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
           \ 'cs,lua,javascript': ['re!\w{2}'],
           \ }

let g:ycm_filetype_whitelist = { 
            \ "c":1,
            \ "cpp":1, 
            \ "go":1,
            \ "python":1,
            \ "sh":1,
            \ "zsh":1,
            \ }

let g:ycm_filetype_blacklist = {
        \ 'markdown' : 1,
        \ 'text' : 1,
        \ 'pandoc' : 1,
        \ 'infolog' : 1,
        \}


call plug#end()
